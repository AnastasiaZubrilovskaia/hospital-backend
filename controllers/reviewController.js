const { Review, Doctor, Appointment, Patient } = require('../models');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
const createReview = async (req, res, next) => {
  const doctorId = parseInt(req.params.doctorId, 10);
  const rating = parseInt(req.body.rating, 10);
  const comment = req.body.comment;
  const patientId = req.patient.id;

  console.log('‚û°Ô∏è createReview() –∑–∞–ø—É—â–µ–Ω');
  console.log('doctorId:', doctorId, typeof doctorId);
  console.log('rating:', rating, typeof rating);
  console.log('comment:', comment);
  console.log('patientId:', patientId);

  if (isNaN(doctorId)) {
    console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π doctorId');
    return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤—Ä–∞—á–∞' });
  }

  if (isNaN(rating) || rating < 1 || rating > 5) {
    console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥');
    return res.status(400).json({ message: '–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5' });
  }

  if (!comment || comment.trim() === '') {
    console.log('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç–æ–π');
    return res.status(400).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  if (comment.length < 10) {
    console.log('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
    return res.status(400).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤' });
  }

  try {
    const existingReview = await Review.findOne({ where: { patientId, doctorId } });
    if (existingReview) {
      console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤');
      existingReview.rating = rating;
      existingReview.comment = comment;
      existingReview.status = 'pending';
      await existingReview.save();
      return res.status(200).json(existingReview);
    }
    const review = await Review.create({
      rating,
      comment,
      status: 'pending',
      patientId,
      doctorId
    });

    console.log('‚úÖ –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω:', review);
    return res.status(201).json(review);
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ createReview:', error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};



// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ
const getDoctorReviews = async (req, res) => {
  try {
    const doctorId = parseInt(req.params.doctorId, 10);
    if (isNaN(doctorId)) {
      return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤—Ä–∞—á–∞' });
    }

    const reviews = await Review.findAll({
      where: {
        doctorId,
        // status: 'approved'
        status: ['approved', 'pending']
      },
      include: [
        { model: Patient, attributes: ['firstName', 'lastName'] }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞
const getPatientReviews = async (req, res) => {
  try {
    const patientId = req.patient.id;

    const reviews = await Review.findAll({
      where: { patientId },
      include: [
        { model: Doctor, attributes: ['firstName', 'lastName'] }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω)
const updateReview = async (req, res) => {
  try {
    const review = await Review.findOne({
      where: {
        id: req.params.id,
        patientId: req.patient.id
      }
    });

    if (!review) {
      return res.status(404).json({ message: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (review.status !== 'pending') {
      return res.status(403).json({ message: '–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"' });
    }

    await review.update(req.body);
    res.json(review);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
const deleteReview = async (req, res) => {
  try {
    const review = await Review.findOne({
      where: {
        id: req.params.id,
        patientId: req.patient.id
      }
    });

    if (!review) {
      return res.status(404).json({ message: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await review.destroy();
    res.json({ message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

module.exports = {
  createReview,
  getDoctorReviews,
  getPatientReviews,
  updateReview,
  deleteReview
};
